/**   
 * @Title: AuthorUserService.java 
 * @Package: com.xz.oa.core.service.account 
 * @Description: 
 * @author: davidwan
 * @date: 2014-7-14 上午10:37:30 
 * @version: V1.0   
 */
package com.xz.oa.core.service.user;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Vector;

import javax.annotation.Resource;

import net.n3.nanoxml.IXMLElement;

import org.apache.shiro.SecurityUtils;
import org.apache.shiro.subject.Subject;
import org.springframework.stereotype.Service;

import com.xz.base.model.JsonResult;
import com.xz.base.model.PageInfo;
import com.xz.base.utils.ConfigValue;
import com.xz.base.utils.SpellUtil;
import com.xz.base.utils.StringUtil;
import com.xz.base.utils.XmlHelper;
import com.xz.oa.core.dao.address.AddressDao;
import com.xz.oa.core.dao.forum.ForumUserDao;
import com.xz.oa.core.dao.organization.DepartmentDao;
import com.xz.oa.core.dao.security.RoleDao;
import com.xz.oa.core.dao.security.RoleMenuDao;
import com.xz.oa.core.dao.staff.StaffDao;
import com.xz.oa.core.dao.user.UserDao;
import com.xz.oa.core.dao.user.UserRoleDao;
import com.xz.oa.core.domain.entity.Address;
import com.xz.oa.core.domain.entity.Department;
import com.xz.oa.core.domain.entity.ForumUser;
import com.xz.oa.core.domain.entity.LoginHelp;
import com.xz.oa.core.domain.entity.Menu;
import com.xz.oa.core.domain.entity.Role;
import com.xz.oa.core.domain.entity.RoleMenu;
import com.xz.oa.core.domain.entity.Staff;
import com.xz.oa.core.domain.entity.User;
import com.xz.oa.core.domain.entity.UserHelp;
import com.xz.oa.core.domain.entity.UserRole;
import com.xz.oa.core.domain.enums.EnumLogModule;
import com.xz.oa.core.service.log.SystemLogService;
import com.xz.oa.core.service.user.ShiroDbRealm.ShiroUser;
import com.xz.oa.sso.service.unionnet.OuterUserService;
import com.xz.oa.sso.utils.SsoConfigValue;

@Service
public class UserService {
	@Resource
	private UserDao userDao;

	@Resource
	private UserRoleDao userRoleDao;

	@Resource
	private ForumUserDao forumUserDao;

	@Resource
	private AddressDao addressDao;

	@Resource
	private DepartmentDao departmentDao;

	@Resource
	private RoleMenuDao roleMenuDao;

	@Resource
	private RoleDao roleDao;

	@Resource
	private StaffDao staffDao;

	@Resource
	private SystemLogService systemLogService;

	/**
	 * @Description 根据用户名获取用户
	 * @param name
	 * @return User
	 * @author davidwan
	 */
	public User findByName(String name) {
		User entity = new User();
		entity.setName(name);
		return userDao.selectEntity(entity);
	}

	/**
	 * @Description 根据Id获取用户
	 * @param id
	 * @return User
	 * @author davidwan
	 */
	public User findById(Integer id) {
		User entity = new User();
		entity.setId(id);
		return userDao.selectEntity(entity);
	}

	/**
	 * @Description 根据条件获取 用户
	 * @param entity
	 * @return User
	 * @author davidwan
	 */
	public User find(User entity) {
		return userDao.selectEntity(entity);
	}

	/**
	 * @Description 根据条件获取列表
	 * @param entity
	 * @return List<User>
	 * @author davidwan
	 */
	public List<User> queryList(User entity) {
		return userDao.selectEntityList(entity);
	}

	/**
	 * @Description 根据条件获取列表
	 * @param entity
	 * @return List<User>
	 * @author davidwan
	 */
	public List<User> queryList(User entity, String mapId) {
		return userDao.selectEntityList(entity, mapId);
	}

	/**
	 * @Description 根据条件获取分页列表
	 * @param entity
	 * @param pageIndex
	 * @param pageSize
	 * @return PageInfo<User>
	 * @author davidwan
	 */
	public PageInfo<User> queryPageList(User entity, int pageIndex, int pageSize) {
		return userDao.selectEntityPageList(entity, pageIndex, pageSize);
	}

	/**
	 * @Description 获取用户菜单
	 * @param userId
	 * @return List<Menu>
	 */
	public Map<Integer, List<Menu>> queryUserMenus(Integer userId) {
		Map<Integer, List<Menu>> menuMap = null;
		RoleMenu entity = new RoleMenu();
		entity.getMap().put("user_id", userId);
		List<RoleMenu> list = roleMenuDao.selectEntityList(entity, "ByUser");
		if (list != null && !list.isEmpty()) {
			Menu menu = new Menu();
			menuMap = menu.groupByLayer(list);
		}

		return menuMap;
	}

	/**
	 * @Description 添加
	 * @param entity
	 * @return JsonResult
	 * @author davidwan
	 */
	public JsonResult create(User entity) {
		Subject currentUser = SecurityUtils.getSubject();
		ShiroUser shiroUser = (ShiroUser) currentUser.getPrincipals().getPrimaryPrincipal();
		entity.setCreate_time(new Date());
		entity.setPassword("123456");
		entity.entryptPassword();
		entity.setPname(SpellUtil.getFullSpell(entity.getReal_name()));
		entity.setFname(SpellUtil.getFirstOneSpell(entity.getReal_name()));

		// 若要获取id，请使用entity.getId();
		int result = userDao.insertEntity(entity);
		int user_id = entity.getId();
		// 用户角色设置
		UserRole u = new UserRole();
		u.setUser_id(user_id);
		userRoleDao.deleteEntity(u);
		if (entity.getRole_ids() != null) {
			for (String item : entity.getRole_ids().split(",")) {
				u = new UserRole();
				u.setUser_id(user_id);
				u.setRole_id(Integer.valueOf(item));
				userRoleDao.insertEntity(u);
			}
		}

		// 创建论坛用户
		boolean isEnableForum = ConfigValue.readBooleanValue("isEnableForum", false);
		if (isEnableForum) {
			ForumUser forumUser = new ForumUser(user_id);
			forumUserDao.insertEntity(forumUser);
		}

		// 创建内部通讯录
		if (entity.getHas_address()) {
			Address a = new Address(entity, shiroUser.getId());
			addressDao.insertEntity(a);

			Department d = new Department();
			d.setId(a.getDept_id());
			d.getMap().put("acount_val", 1);
			departmentDao.updateEntity(d);
		}
		if (result > 0) {
			// 添加操作日志
			systemLogService.create(EnumLogModule.组织架构.getValue(), "添加用户", "添加用户：" + entity.getReal_name());
			return new JsonResult(true);
		} else {
			return new JsonResult(false);
		}
	}

	/**
	 * @Description 修改
	 * @param entity
	 * @return JsonResult
	 * @author davidwan
	 */
	public JsonResult modify(String log_name, User entity) {
		int result = userDao.updateEntity(entity);

		if (result > 0) {
			if (!"".equals(log_name)) {
				// 添加操作日志
				systemLogService.create(EnumLogModule.组织架构.getValue(), log_name + "用户", log_name + "用户ID："
						+ (entity.getId() == null ? StringUtil.buildIds((String[]) entity.getMap().get("ids")) : entity.getId()));
			}
			return new JsonResult(true);
		} else {
			return new JsonResult(false);
		}
	}

	/**
	 * @Description 修改(创建内部通讯录)
	 * @param entity
	 * @return JsonResult
	 * @author davidwan
	 */
	public JsonResult modifyAddress(int id) {
		Subject currentUser = SecurityUtils.getSubject();
		ShiroUser shiroUser = (ShiroUser) currentUser.getPrincipals().getPrimaryPrincipal();
		User entity = new User();
		entity.setId(id);
		entity.setHas_address(true);
		int result = userDao.updateEntity(entity);

		// 添加内部通讯录
		entity = userDao.selectEntity(entity);
		Address a = new Address(entity, shiroUser.getId());
		addressDao.insertEntity(a);

		// 更新部门内部通讯录冗余字段
		Department d = new Department();
		d.setId(a.getDept_id());
		d.getMap().put("acount_val", 1);
		departmentDao.updateEntity(d);
		if (result > 0) {
			// 添加操作日志
			systemLogService.create(EnumLogModule.组织架构.getValue(), "创建内部通讯录", "创建内部通讯录用户：" + entity.getReal_name());
			return new JsonResult(true);
		} else {
			return new JsonResult(false);
		}
	}

	/**
	 * @Description 修改
	 * @param entity
	 * @return JsonResult
	 * @author davidwan
	 */
	public JsonResult modify_psw(User entity) {
		if (entity.getPassword_old() != null) {
			entity.entryptPassword_old();
			if (!entity.getPassword_hid().equals(entity.getPassword_old())) {
				return new JsonResult(false, "原密码输入不正确！");
			}
		}
		entity.entryptPassword();
		int result = userDao.updateEntity(entity);

		if (result > 0) {
			// 添加操作日志
			systemLogService.create(EnumLogModule.组织架构.getValue(), "修改密码", "修还密码用户：" + entity.getId());
			return new JsonResult(true);
		} else {
			return new JsonResult(false);
		}
	}

	/**
	 * @Description 修改
	 * @param entity
	 * @return JsonResult
	 * @author davidwan
	 */
	public JsonResult modify(User entity, String role_ids) {
		if (entity.getReal_name() != null) {
			entity.setPname(SpellUtil.getFullSpell(entity.getReal_name()));
			entity.setFname(SpellUtil.getFirstOneSpell(entity.getReal_name()));
		}
		int result = userDao.updateEntity(entity);
		int user_id = entity.getId();
		// 用户角色设置
		UserRole u = new UserRole();
		u.setUser_id(user_id);
		userRoleDao.deleteEntity(u);
		if (role_ids != null) {
			for (String item : role_ids.split(",")) {
				u = new UserRole();
				u.setUser_id(user_id);
				u.setRole_id(Integer.valueOf(item));
				userRoleDao.insertEntity(u);
			}
		}
		if (entity.getHas_address()) {
			Department d = new Department();
			d.setAcount(0);
			departmentDao.updateEntity(d);
			List<Department> dept_list = departmentDao.selectEntityList(new Department(), "ByAddress");
			for (Department item : dept_list) {
				departmentDao.updateEntity(item);
			}

		}

		if (result > 0) {
			// 添加操作日志
			systemLogService.create(EnumLogModule.组织架构.getValue(), "修改用户", "修改用户" + entity.getReal_name());
			return new JsonResult(true);
		} else {
			return new JsonResult(false);
		}
	}

	/**
	 * @Description 根据Id删除
	 * @param id
	 * @return JsonResult
	 * @author davidwan
	 */
	public JsonResult removeById(Integer id) {
		User entity = new User();
		entity.setId(id);
		int result = userDao.deleteEntity(entity);
		if (result > 0) {
			// 添加操作日志
			systemLogService.create(EnumLogModule.组织架构.getValue(), "删除用户", "删除用户ID：" + id);
			return new JsonResult(true);
		} else {
			return new JsonResult(false);
		}
	}

	/**
	 * @Description 根据多个Id删除
	 * @param ids
	 * @return JsonResult
	 * @author davidwan
	 */
	public JsonResult removeByIds(String ids) {
		User entity = new User();
		entity.getMap().put("ids", ids.split(","));
		int result = userDao.deleteEntity(entity);
		if (result > 0) {
			// 添加操作日志
			systemLogService.create(EnumLogModule.组织架构.getValue(), "批量删除用户", "批量删除用户ID：" + ids);
			return new JsonResult(true);
		} else {
			return new JsonResult(false);
		}
	}

	/**
	 * @Description 根据指定条件删除
	 * @param entity
	 * @return JsonResult
	 * @author davidwan
	 */
	public JsonResult remove(User entity) {
		int result = userDao.deleteEntity(entity);
		if (result > 0) {
			return new JsonResult(true);
		} else {
			return new JsonResult(false);
		}
	}

	// 验证名称重名
	public boolean validateName(Integer id, String name) {
		User t = new User();
		if (id == null) {
			id = 0;
		}
		t.getMap().put("id", id);
		t.getMap().put("name", name);
		t.getMap().put("name_valid", "true");
		int count = userDao.selectEntityCount(t);
		if (count > 0) {
			return false;
		} else {
			return true;
		}
	}

	/**
	 * @Description 根据条件获取列表
	 * @param entity
	 * @return List<Address>
	 * @author davidwan
	 */
	public List<UserHelp> queryListHelp(User entity) {
		return userDao.selectEntityListHelp(entity);
	}

	@SuppressWarnings("deprecation")
	public LoginHelp modifyForValidateLogin(String userName, String password) {
		LoginHelp loginHelp = new LoginHelp(false);

		String[] nameArray = SsoConfigValue.readValue("user_name", "").split(",");
		String dept_name = SsoConfigValue.readValue("dept_name"), role_name = SsoConfigValue.readValue("role_name");

		// 如果需要单点登录
		if (!StringUtil.judgeArray(nameArray, userName)) {
			// String flagObj =
			// "<?xml version='1.0' encoding='utf-8'?><SSOMsg><ResultCode>0</ResultCode><ResultDesc></ResultDesc></SSOMsg>";
			OuterUserService outerUserService = new OuterUserService();
			String flagObj = (String) outerUserService.verifyUser(userName, password);
			if (flagObj == null) {
				return loginHelp;
			}
			IXMLElement xml = XmlHelper.getXml(flagObj, "ResultCode");
			if (xml.getContent() != null && xml.getContent().trim().equals("0")) {
				// String objUser =
				// "<?xml version='1.0' encoding='gbk'?><rows><row usercode='0' username='dfdf' password2='42'/></rows>";
				String reqParam = buildRequestParam(userName);
				String objUser = (String) outerUserService.gainUserInfo(reqParam);
				if (objUser == null) {
					return loginHelp;
				}

				xml = XmlHelper.getXml(objUser, "row");
				String real_name = xml.getAttribute("username");
				String userpwd = xml.getAttribute("userpwd");

				loginHelp.setSys_password(userpwd);
				User user = this.findByName(userName);
				// oa系统中用户不存在，则添加
				if (user == null) {
					// 添加部门
					Department d = new Department();
					d.setName(dept_name);
					d = departmentDao.selectEntity(d);

					// 添加角色
					Role r = new Role();
					r.setName(role_name);
					r = roleDao.selectEntity(r);

					// 添加用户
					user = new User();
					user.setName(userName);
					user.setPassword(password);
					user.entryptPassword();
					user.setReal_name(real_name);
					user.setIs_allowso(false);
					user.setIs_first_login(false);
					user.setState(1);
					user.setSex(1);
					user.setEmail("");
					user.setHas_address(false);
					user.setCreate_time(new Date());
					if (d != null) {
						user.setDept_id(d.getId());
					}
					userDao.insertEntity(user);

					// 添加用户角色
					int user_id = user.getId();
					UserRole ur = new UserRole();
					ur.setUser_id(user_id);
					if (r != null) {
						ur.setRole_id(r.getId());
					}
					userRoleDao.insertEntity(ur);

				} else {
					// 存在，更新真实姓名
					User newEntity = new User();
					newEntity.setId(user.getId());
					newEntity.setName(userName);
					newEntity.setReal_name(real_name);
					newEntity.setPassword(password);
					newEntity.entryptPassword();
					userDao.updateEntity(newEntity);
				}
				loginHelp.setFlag(true);
				loginHelp.setUserName(userName);
				loginHelp.setPassword(password);
			}
		}
		return loginHelp;
	}

	/**
	 * @Description 构造请求参数
	 * @param userCode
	 * @return String
	 */
	private String buildRequestParam(String userCode) {
		String format = String.format("<?xml version=\"1.0\" encoding=\"gbk\"?><row usercode=\"%s\" />", userCode);
		return format;
	}

	@SuppressWarnings("rawtypes")
	public List<String> gainModule(String userName) {
		List<String> r = new ArrayList<String>();

		String[] nameArray = SsoConfigValue.readValue("user_name", "").split(",");

		// 如果不需要单点登录，直接返回
		if (StringUtil.judgeArray(nameArray, userName)) {
			return r;
		}

		String reqParam = buildRequestParam(userName);
		OuterUserService outerUserService = new OuterUserService();
		String objModule = (String) outerUserService.gainUserModules(reqParam);
		if (objModule == null) {
			return r;
		}
		Vector actions = XmlHelper.getXmlList(objModule, "row");
		for (int i = 0; i < actions.size(); i++) {
			IXMLElement action = (IXMLElement) actions.elementAt(i);
			if (action != null) {
				r.add(action.getAttribute("modulename"));
			}
		}
		return r;
	}

	/**
	 * @Description 初始化论坛用户
	 * @return boolean
	 */
	public boolean createForumUsers() {
		boolean flag = false;
		List<User> list = userDao.selectEntityList(new User());
		if (list != null && !list.isEmpty()) {
			int count = 0;
			for (User user : list) {
				forumUserDao.insertEntity(new ForumUser(user.getId()));
				count++;
			}
			flag = count > 0;
		}
		return flag;
	}

	/**
	 * @Description 批量导入
	 * @param userList
	 * @param creatorId
	 * @return JsonResult
	 */
	public Map<String, User> createForBatchImport(List<User> userList, Integer creatorId) {
		// 默认角色
		String roleName = ConfigValue.readValue("tempRoleName", "普通用户");
		Role role = new Role(roleName);
		role = roleDao.selectEntity(role);
		if (role == null) {
			return null;
		}

		// 默认部门
		String deptName = ConfigValue.readValue("tempDeptName", "临时部门");
		Department dept = new Department();
		List<Department> deptList = departmentDao.selectEntityList(dept);
		Integer deptId = dept.gainIdByName(deptList, deptName);

		// 所有用户
		List<User> existedUsers = userDao.selectEntityList(new User());
		// 所有内部联系人
		List<Address> existedAddresses = addressDao.selectEntityList(new Address());
		// 所有员工
		List<Staff> existedStaffs = staffDao.selectEntityList(new Staff());

		UserRole userRole = null;
		Address address = null;
		Staff staff = null;

		Integer userDeptId = null;
		Integer userDeptPid = null;
		User updatingUser = null;
		User existedUser = null;
		Address updatingAddress = new Address();
		Address existedAddress = null;
		Staff updatingStaff = new Staff();
		Staff existedStaff = null;
 
		Map<String, User> userMap = new HashMap<String, User>();
		for (User user : userList) {
			// 用户
			userDeptPid = gainParentId(user.getName());
			userDeptId = dept.gainIdByNameAndPid(deptList, user.getDept_name(), userDeptPid);
			if (userDeptId != null) {
				user.setDept_id(userDeptId);
			} else {
				user.setDept_id(deptId); 
			}

			boolean flag = user.isExisted(existedUsers, user.getName());
			existedUser = user.gainExistedByRealName(existedUsers, user.getReal_name());
			// 工号已经存在直接更新
			if (flag || existedUser != null) {
				updatingUser = new User(existedUser.getId(), user);
				userDao.updateEntity(updatingUser);
				
				// 更新内部通讯录
				existedAddress = updatingAddress.gainAddressById(existedAddresses, user.getId());
				if(existedAddress != null){
					updatingAddress = new Address(existedAddress.getId(), updatingUser);
					addressDao.updateEntity(updatingAddress);
				}
				
				// 更新员工信息
				existedStaff = updatingStaff.gainStaffById(existedStaffs, user.getId());
				if(existedStaff != null){
					updatingStaff = new Staff(existedStaff.getId(), updatingUser);
					staffDao.updateEntity(updatingStaff);
				}
				
			} else {
				userDao.insertEntity(user);

				// 用户权限
				userRole = new UserRole(user.getId(), role.getId());
				userRoleDao.insertEntity(userRole);

				// 内部通讯录
				address = new Address(user, creatorId);
				addressDao.insertEntity(address);

				// 员工
				staff = new Staff(user.getReal_name(), user.getName(), user.getId());
				staffDao.insertEntity(staff);

				// 论坛用户
				forumUserDao.insertEntity(new ForumUser(user.getId()));
			}
		} 

		return userMap;
	}

	private Integer gainParentId(String name) { 
		// 医生 【医疗科室】
		if (name.startsWith("1")) {
			return 23;
		}
		// 护理 【护理科室】
		else if (name.startsWith("2")) {
			return 38;
		}
		// 技药【医技科室】
		else if (name.startsWith("3")) {
			return 6;
		}
		// 行政 【行政科室 】
		else if (name.startsWith("6")) {
			return 11;
		}
		return null;
	}
}
