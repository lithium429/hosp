<?xml version="1.0" encoding="UTF-8"?> 
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="entity.Advice">  
	<resultMap id="adviceResult" type="Advice">
		<result column="id" property="id" jdbcType="DECIMAL" />
		<result column="topic_id" property="topic_id" jdbcType="DECIMAL" />
		<result column="type" property="type" jdbcType="DECIMAL" />
		<result column="state" property="state" jdbcType="DECIMAL" />
		<result column="is_open" property="is_open" jdbcType="VARCHAR" />
		<result column="is_anonymous" property="is_anonymous" jdbcType="VARCHAR" />
		<result column="urgency" property="urgency" jdbcType="DECIMAL" />
		<result column="complexity" property="complexity" jdbcType="DECIMAL" />
		<result column="content" property="content" jdbcType="VARCHAR" />
		<result column="user_id" property="user_id" jdbcType="DECIMAL" />
		<result column="creator_id" property="creator_id" jdbcType="DECIMAL" />
		<result column="create_time" property="create_time"  />
		<result column="haddle_id" property="haddle_id" jdbcType="DECIMAL" />
		<result column="haddle_time" property="haddle_time"  />
		<result column="haddle_content" property="haddle_content" jdbcType="VARCHAR" />
		<result column="title" property="title" jdbcType="VARCHAR" />
    </resultMap>

	<sql id="sf-advice">
		<where>
			<if test="id != null">
				and a.id = #{id}
			</if>
			<if test="topic_id != null">
				and a.topic_id = #{topic_id}
			</if>
			<if test="type != null">
				and a.type = #{type}
			</if>
			<if test="state != null">
				and a.state = #{state}
			</if>
			<if test="is_open != null">
				and a.is_open = #{is_open}
			</if>
			<if test="is_anonymous != null">
				and a.is_anonymous = #{is_anonymous}
			</if>
			<if test="urgency != null">
				and a.urgency = #{urgency}
			</if>
			<if test="complexity != null">
				and a.complexity = #{complexity}
			</if>
			<if test="content != null">
				and a.content = #{content}
			</if>
			<if test="user_id != null">
				and a.user_id = #{user_id}
			</if>
			<if test="creator_id != null">
				and a.creator_id = #{creator_id}
			</if>
			<if test="create_time != null">
				and a.create_time = #{create_time}
			</if>
			<if test="map.keyword != null">
				and a.keyword like concat('%',#{map.keyword},'%')
			</if>
			<if test="map.title != null">
				and a.title like concat('%',#{map.title},'%')
			</if>
			<if test="map.user_name != null">
				and b.real_name like concat('%',#{map.user_name},'%')
			</if>
			<if test="map.topic_name != null">
				and c.name like concat('%',#{map.topic_name},'%')
			</if>
			<if test="map.create_time_min != null">
				and a.create_time >= #{map.create_time_min}
			</if>
			<if test="map.create_time_max != null">
				and #{map.create_time_max} >= a.create_time 
			</if>
			<if test="map.title_valid != null">
				and a.id !=#{map.id} and a.title =#{map.title_valid }
			</if>
			<if test="map.ids != null">
				and a.id in
				<foreach collection="map.ids" open="(" separator="," close=")"
					index="index" item="item">
					#{item}
				</foreach>
			</if>
			<if test="map.prev != null">
				<![CDATA[and a.id > #{map.id}]]>
			</if>
			<if test="map.next != null">
				<![CDATA[and a.id < #{map.id}]]>
			</if>
		</where>
		<if test="map.sort != null">
			order by a.id desc
		</if>
		<if test="map.sort_asc != null">
			order by a.id
		</if>
	</sql>
	
	<select id="selectAdviceForPrev" resultType="Advice" parameterType="Advice">
		select a.*,b.real_name as user_name,c.name as topic_name,d.name as haddle_name from advice a left join user b on a.user_id=b.id
		left join advice_topic c on a.topic_id=c.id left join user d on a.haddle_id=d.id
		<include refid="sf-advice" />
		limit 0,1
	</select>
	
	<select id="selectAdviceForNext" resultType="Advice" parameterType="Advice">
		select a.*,b.real_name as user_name,c.name as topic_name,d.name as haddle_name from advice a left join user b on a.user_id=b.id
		left join advice_topic c on a.topic_id=c.id left join user d on a.haddle_id=d.id
		<include refid="sf-advice" />
		limit 0,1
	</select>

	<select id="selectAdvice" resultType="Advice" parameterType="Advice">
		select a.*,b.real_name as user_name,c.name as topic_name,d.name as haddle_name from advice a left join user b on a.user_id=b.id
		left join advice_topic c on a.topic_id=c.id left join user d on a.haddle_id=d.id
		<include refid="sf-advice" />
	</select>
	
	<select id="selectAdviceList" resultType="Advice" parameterType="Advice">
		select a.* from advice a
		<include refid="sf-advice" />
	</select>
	
	<select id="selectAdviceCount" resultType="int" parameterType="Advice">
		select count(1) from advice a left join user b on a.user_id=b.id
		<include refid="sf-advice" />
	</select>
	
	<select id="selectAdvicePageList" resultType="Advice" parameterType="Advice">
		select a.*,b.real_name as user_name,c.name as topic_name from advice a left join user b on a.user_id=b.id
		left join advice_topic c on a.topic_id=c.id
		<include refid="sf-advice" />
		limit #{map.startIndex},#{map.pageSize}
	</select>
	
	<select id="selectAdviceSort" resultType="int" parameterType="Advice">
		select max(a.id) from advice a
		<include refid="sf-advice" />
	</select>

	<insert id="insertAdvice" parameterType="Advice" useGeneratedKeys="true"
		keyProperty="id"> 
		<![CDATA[insert into advice (]]>
		<trim suffixOverrides=",">  
			<if test="id != null">id,</if> 
			<if test="topic_id != null">topic_id,</if> 
			<if test="type != null">type,</if> 
			<if test="state != null">state,</if> 
			<if test="is_open != null">is_open,</if> 
			<if test="is_anonymous != null">is_anonymous,</if> 
			<if test="urgency != null">urgency,</if> 
			<if test="complexity != null">complexity,</if> 
			<if test="content != null">content,</if> 
			<if test="user_id != null">user_id,</if> 
			<if test="creator_id != null">creator_id,</if> 
			<if test="create_time != null">create_time,</if> 
			<if test="haddle_id != null">haddle_id,</if> 
			<if test="haddle_time != null">haddle_time,</if> 
			<if test="haddle_content != null">haddle_content,</if> 
			<if test="title != null">title,</if> 
		</trim>
		<![CDATA[) values (]]>
		<trim suffixOverrides=",">  
			<if test="id != null">#{id},</if> 
			<if test="topic_id != null">#{topic_id},</if> 
			<if test="type != null">#{type},</if> 
			<if test="state != null">#{state},</if> 
			<if test="is_open != null">#{is_open},</if> 
			<if test="is_anonymous != null">#{is_anonymous},</if> 
			<if test="urgency != null">#{urgency},</if> 
			<if test="complexity != null">#{complexity},</if> 
			<if test="content != null">#{content},</if> 
			<if test="user_id != null">#{user_id},</if> 
			<if test="creator_id != null">#{creator_id},</if> 
			<if test="create_time != null">#{create_time},</if> 
			<if test="haddle_id != null">#{haddle_id},</if> 
			<if test="haddle_time != null">#{haddle_time},</if> 
			<if test="haddle_content != null">#{haddle_content},</if> 
			<if test="title != null">#{title},</if> 
		</trim>
		<![CDATA[)]]>
	</insert>

	<update id="updateAdvice" parameterType="Advice">
		update advice
		<set>
			<if test="topic_id != null">topic_id=#{topic_id},</if>
			<if test="type != null">type=#{type},</if>
			<if test="state != null">state=#{state},</if>
			<if test="is_open != null">is_open=#{is_open},</if>
			<if test="is_anonymous != null">is_anonymous=#{is_anonymous},</if>
			<if test="urgency != null">urgency=#{urgency},</if>
			<if test="complexity != null">complexity=#{complexity},</if>
			<if test="content != null">content=#{content},</if>
			<if test="user_id != null">user_id=#{user_id},</if>
			<if test="creator_id != null">creator_id=#{creator_id},</if>
			<if test="create_time != null">create_time=#{create_time},</if>
			<if test="haddle_id != null">haddle_id=#{haddle_id},</if>
			<if test="haddle_time != null">haddle_time=#{haddle_time},</if>
			<if test="haddle_content != null">haddle_content=#{haddle_content},</if>
			<if test="title != null">title=#{title},</if>
		</set>
		<where>
			<if test="id != null">
				and id = #{id}
			</if>
			<if test="map.ids != null">
				and id in
				<foreach collection="map.ids" open="(" separator="," close=")"
					index="index" item="item">
					#{item}
				</foreach>
			</if>
		</where>
	</update>
	
	<delete id="deleteAdvice" parameterType="Advice">
		delete from advice 
		<where>
			<if test="id != null">
				and id = #{id}
			</if>
			<if test="map.ids != null">
				and id in
				<foreach collection="map.ids" open="(" separator="," close=")"
					index="index" item="item">
					#{item}
				</foreach>
			</if>
		</where>
	</delete>
</mapper>